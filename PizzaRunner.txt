SANITY: Verify the datatype of columns of a table in a database:
select DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS where
table_schema = 'pizza_runner' and table_name = 'pizza_toppings';

CLEANING DATA: update tables to replce Null/empty values with meaningful data

CUSTOMER_ORDERS
select * from pizza_runner.customer_orders;

update pizza_runner.customer_orders
set exclusions = 0, extras = 0
where exclusions = 'null' or exclusions = ''
or extras = 'null' or extras = '';

create view normalized_table as (select *, regexp_split_to_table(extras, E', ') as extras_split, regexp_split_to_table(exclusions, E', ') as exclusions_split
from pizza_runner.customer_orders);

create table pizza_runner.customer_order_normalized
as select * from normalized_table;

alter table pizza_runner.customer_order_normalized
alter column extras_split type integer using(extras_split::integer);

alter table pizza_runner.customer_order_normalized
alter column exclusions_split type integer using(exclusions_split::integer);

select * from pizza_runner.customer_order_normalized;

RUNNER_ORDERS
update pizza_runner.runner_orders
set cancellation = 'NA'
where cancellation = 'null' or cancellation = '' or 
order_id = 3 or order_id = 4 or order_id=5;

update pizza_runner.runner_orders
set duration = 0
where duration = 'null' or cancellation = '' ;

update pizza_runner.runner_orders
set distance = 0
where distance = 'null' or distance = '' ;

update pizza_runner.runner_orders
set pickup_time = 0
where pickup_time = 'null' or pickup_time = '' ;

update pizza_runner.runner_orders
set duration = replace(duration, 'minutes', '');

update pizza_runner.runner_orders
set duration = replace(duration, 'mins', '');

update pizza_runner.runner_orders
set duration = replace(duration, 'minute', '');

update pizza_runner.runner_orders
set distance = replace(distance, 'km', '');

ALTER TABLE pizza_runner.runner_orders ALTER COLUMN "pickup_time"
    TYPE timestamp without time zone USING(to_timestamp("pickup_time", 'YYYY-MM-DD')::timestamp without time zone);
    
select * from pizza_runner.runner_orders;


I). Pizza Metrics

1. How many pizzas were ordered?
select count(pizza_id) as total_ordered_pizzas
from pizza_runner.customer_orders

2. How many unique customer orders were made?
select count(distinct order_id) as Total_Customer_Orders
from pizza_runner.customer_orders

3. How many successful orders were delivered by each runner?
select count(*) as Successful_orders
from pizza_runner.runner_orders
where cancellation != 'Restaurant Cancellation' or
cancellation != 'Customer Cancellation';

4. How many of each type of pizza was delivered?
select pizza_id, count(pizza_id) as total_pizzas_delivered
from pizza_runner.customer_orders
group by pizza_id
order by pizza_id;

5. How many Vegetarian and Meatlovers were ordered by each customer?
select customer_id, pizza_id, count(pizza_id) as total_pizzas_delivered
from pizza_runner.customer_orders
group by pizza_id, customer_id
order by pizza_id;

6. What was the maximum number of pizzas delivered in a single order?
select order_id, count(pizza_id) as maximum_pizzas_delivered
from pizza_runner.customer_orders
group by order_id
order by maximum_pizzas_delivered desc
limit 1;

7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
select customer_id, count(*) as Normal_pizza
from pizza_runner.customer_order_normalized
where extras_split = 0 and exclusions_split=0
group by customer_id
order by customer_id;

8. How many pizzas were delivered that had both exclusions and extras?
select customer_id, count(distinct(pizza_id)) as Normal_pizza
from pizza_runner.customer_order_normalized
where extras_split > 0 and exclusions_split > 0
group by customer_id
order by customer_id;

9. What was the total volume of pizzas ordered for each hour of the day?
10. What was the volume of orders for each day of the week?
